Ledger
======

.. note:: See the :doc:`/operations/ledger_snapshot` section to find out more about how ledger files are generated by CCF nodes and how they should be managed by operators.

The entire service and application state is contained in the ledger (including both governance and application transactions). The ledger contains regular signature transactions (``public:ccf.internal.signatures`` map) which sign the root of the :term:`Merkle Tree` at the time the signature transaction is emitted.

.. note:: The frequency of the signatures is set by the ``--sig-tx-interval`` and ``--sig-ms-interval`` command line options to ``cchost``.

Ledger Encryption
-----------------

Each entry in the ledger corresponds to a transaction committed by the primary node.

When a transaction is committed, each affected ``Store::Map`` is serialised in different security domains (i.e. public or private), based on the name of the Map when it was created (default is private). A public ``Store::Map`` (i.e. one whose name starts with "public:") is serialised and stored in the ledger as plaintext while a private ``Store::Map`` is serialised and encrypted before being stored.

Ledger entries are integrity-protected and encrypted using a symmetric key shared by all trusted nodes (see :doc:`/overview/cryptography`). This key is kept secure inside each enclave. See :ref:`governance/common_member_operations:Rekeying Ledger` for details on how members can rotate the ledger encryption key.

Note that even if a transaction only affects a private ``Store::Map``, unencrypted information such as the sequence number is always present in the serialised entry. More information about the ledger entry format is available in the :doc:`/build_apps/kv/kv_serialisation` section.