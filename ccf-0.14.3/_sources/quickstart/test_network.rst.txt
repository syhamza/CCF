Starting a Test Network
=======================

.. note:: Before starting a CCF test network, make sure that:

    - The CCF runtime environment has successfully been setup (see :ref:`environment setup instructions <quickstart/run_setup:Setup CCF Runtime Environment>`).
    - CCF is installed (see :ref:`installation steps <quickstart/install:Install>`)

The quickest way to start a CCF test network is to use the `sandbox.sh <https://github.com/microsoft/CCF/blob/master/tests/sandbox/sandbox.sh>`_ test script, specifying the :doc:`enclave image </developers/index>` to run.

The script creates a new one node test CCF network running locally. All the governance requests required to open the network to users are automatically issued.

For example, deploying the ``liblogging`` example application:

.. code-block:: bash

    $ cd CCF/build
    $ ../sandbox.sh --package ./liblogging.virtual.so
    Setting up Python environment...
    Python environment successfully setup
    [16:14:05.294] Starting 1 CCF nodes...
    [16:14:05.295] Virtual mode enabled
    [16:14:10.010] Started CCF network with the following nodes:
    [16:14:10.011]   Node [0] = https://127.0.0.1:8000
    [16:14:10.011] You can now issue business transactions to the ./liblogging.virtual.so application.
    [16:14:10.011] Keys and certificates have been copied to the common folder: /data/src/CCF/build/workspace/sandbox_common
    [16:14:10.011] See https://microsoft.github.io/CCF/master/users/issue_commands.html for more information.
    [16:14:10.011] Press Ctrl+C to shutdown the network.

.. note::

    - `sandbox.sh` defaults to using CCF's `virtual` mode, which does not require or make use of SGX. To load debug or release enclaves and make use of SGX, `--enclave-type` must be set to the right value, for example: `./sandbox.sh --enclave-type release -p ./liblogging.enclave.so.signed`
    - The ``--verbose`` argument can be used to display all commands issued by operators and members to start the network.
    - Snapshots can be generated at regular intervals by the primary node of the service using the ``--snapshot-tx-interval <interval>`` option.

The log files (``out`` and ``err``) and ledger directory (``<node_id>.ledger``) for each CCF node can be found under ``./workspace/test_network_<node_id>``.

.. note:: The first time the command is run, a Python virtual environment will be created. This may take a few seconds. It will not be run the next time the ``sandbox.sh`` script is started.

In a different terminal, using the local IP address and port of the CCF nodes displayed by the command (e.g. ``https://127.0.0.1:8000`` for node ``0``), it is then possible for users to :ref:`issue business requests <users/issue_commands:Issuing Commands>`.

Recovering a Service
--------------------

The ``sandbox.sh`` script can also be used to automatically recover a defunct network, as per the steps described :ref:`here <members/accept_recovery:Accepting Recovery and Submitting Shares>`. The ledger to be recovered (``--ledger-dir``) and the directory containing the members and users identities (``--common-dir``) should be passed as arguments to the script.

Additionally, if snapshots were generated by the defunct service (using the ``--snapshot-tx-interval <interval>`` option), the recovery procedure can be significantly sped up by re-starting from the latest available snapshot (``--snapshot-dir``).

.. code-block:: bash

    $ cd CCF/build
    $ cp -r ./workspace/sandbox_0/0.ledger .
    $ cp -r ./workspace/sanbox_0/snapshots . # Optional, only if snapshots are available
    $ ./sandbox.sh -e release -p liblogging.enclave.so.signed --recover --ledger-dir 0.ledger --common-dir ./workspace/sandbox_common/ [--snapshot-dir snapshots]
    Setting up Python environment...
    Python environment successfully setup
    [16:24:29.563] Starting 1 CCF nodes...
    [16:24:29.563] Recovering network from:
    [16:24:29.563]  - Common directory: ./workspace/sandbox_common/
    [16:24:29.563]  - Ledger: 0.ledger
    [16:24:29.563] No available snapshot to recover from. Entire transaction history will be replayed.
    [16:24:32.885] Started CCF network with the following nodes:
    [16:24:32.885]   Node [1] = https://127.0.0.1:8000
    [16:24:32.885] You can now issue business transactions to the liblogging.enclave.so.signed application.
    [16:24:32.885] Keys and certificates have been copied to the common folder: ./workspace/sandbox_common/
    [16:24:32.885] See https://microsoft.github.io/CCF/master/users/issue_commands.html for more information.
    [16:24:32.885] Press Ctrl+C to shutdown the network.

The effects of transactions committed by the defunct network should then be recovered. Users can also :ref:`issue new business requests <users/issue_commands:Issuing Commands>`.

.. note:: The ``--ledger-recovery-timeout`` argument should be used to specify the maximum timeout (in seconds) that the script will wait for CCF to recover the ledger. Depending on the size of the ledger to recover, this timeout may have to be set to a large value.
